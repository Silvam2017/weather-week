{"version":3,"sources":["components/Header/index.js","components/Footer/index.js","components/WeatherInfo/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","id","Footer","WeatherInfo","useState","query","setQuery","CurrentWeather","setCurrentWeather","type","className","placeholder","onChange","e","target","value","onKeyPress","event","key","fetch","then","response","json","console","log","main","name","src","alt","Math","round","temp","weather","humidity","wind","speed","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"mKAaeA,MAXf,WAEI,OACI,6BACI,8BACI,wBAAIC,GAAG,eAAP,mBCIDC,MATf,WAEI,OACI,yBAAKD,GAAG,eAAR,6B,OC2DOE,MA9Df,WAEI,IAFoB,EAOfC,mBAAS,IAPM,mBAKhBC,EALgB,KAMhBC,EANgB,OAYfF,mBAAS,IAZM,mBAUhBG,EAVgB,KAWhBC,EAXgB,KA0BpB,OACI,6BACI,yBAAKP,GAAG,oBACA,2BACAQ,KAAK,OACLC,UAAU,aACVC,YAAY,kBACZC,SAAU,SAAAC,GAAC,OAAIP,EAASO,EAAEC,OAAOC,QACjCA,MAAOV,EACPW,WArBD,SAAAC,GACO,UAAdA,EAAMC,KACNC,MAAM,qDAAD,OAAsDd,EAAtD,iCAdA,qCAeJe,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACJb,EAAkBa,GAClBf,EAAS,IACTiB,QAAQC,IAAIH,UAiBkB,oBAAvBd,EAAekB,KACpB,yBAAKxB,GAAG,aACJ,yBAAKS,UAAU,YACX,yBAAKA,UAAU,QAAQH,EAAemB,OAE1C,yBAAKhB,UAAU,WACf,yBAAKA,UAAU,QACP,yBACIiB,IAAG,8CAAiDC,IAAI,eACxDlB,UAAU,eACVT,GAAG,cAGX,yBAAKS,UAAU,QAAf,gBAAoCmB,KAAKC,MAAMvB,EAAekB,KAAKM,MAAnE,SACA,yBAAKrB,UAAU,eAAf,gBAA2CH,EAAeyB,QAAQ,GAAGP,MACrE,yBAAKf,UAAU,SAAf,sBAA2CH,EAAekB,KAAKQ,SAA/D,KACA,yBAAKvB,UAAU,QAAf,eAAmCmB,KAAKC,MAAMvB,EAAe2B,KAAKC,OAAlE,SAGP,KC1CFC,MAXf,WAEE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,a","file":"static/js/main.b86a8b61.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Header ()  {\r\n\r\n    return (\r\n        <div>\r\n            <form>\r\n                <h1 id='header-text'>Weather Week</h1>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nfunction Footer ()  {\r\n\r\n    return (\r\n        <div id='footer-text'>\r\n            Created by Michael Silva\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React, {useState} from 'react';\r\n\r\nfunction WeatherInfo()  {\r\n\r\n    const apiKey='7aeefed14e670086fed17e50b13e3bf5'\r\n\r\n    const [\r\n        query,\r\n        setQuery\r\n     ] = useState('');\r\n\r\n    const [\r\n        CurrentWeather,\r\n        setCurrentWeather\r\n     ] = useState({});\r\n\r\n    const search = event => {\r\n        if (event.key === 'Enter') {\r\n            fetch(`https://api.openweathermap.org/data/2.5/weather?q=${query}&units=imperial&appid=${apiKey}`)\r\n            .then(response => response.json())\r\n            .then(response => {\r\n              setCurrentWeather(response);\r\n              setQuery('');\r\n              console.log(response);\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div id='search-container'>\r\n                    <input \r\n                    type=\"text\"\r\n                    className=\"search-bar\"\r\n                    placeholder=\"Enter City Name\"\r\n                    onChange={e => setQuery(e.target.value)}\r\n                    value={query}\r\n                    onKeyPress={search}\r\n                />\r\n            </div>\r\n            {(typeof CurrentWeather.main != 'undefined' ? (\r\n                <div id='container'>\r\n                    <div className='location'>\r\n                        <div className='city'>{CurrentWeather.name}</div>\r\n                    </div>\r\n                    <div className='weather'>\r\n                    <div className='icon'>\r\n                            <img \r\n                                src={`http://openweathermap.org/img/wn/10d@2x.png`} alt='weather icon'\r\n                                className='weather-icon'\r\n                                id='icon-img'\r\n                            />\r\n                        </div>\r\n                        <div className='temp'>Temperature: {Math.round(CurrentWeather.main.temp)}Â°F</div>\r\n                        <div className='description'>Description: {CurrentWeather.weather[0].main}</div>\r\n                        <div className='humid'>Relative Humidity: {CurrentWeather.main.humidity}%</div>\r\n                        <div className='wind'>Wind Speed: {Math.round(CurrentWeather.wind.speed)}mph</div>\r\n                    </div>\r\n                </div>\r\n            ) : (''))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeatherInfo;\r\n\r\n/*\r\n\r\n*/","import React from 'react';\nimport Header from '../src/components/Header/index';\nimport Footer from '../src/components/Footer/index';\nimport WeatherInfo from '../src/components/WeatherInfo/index';\n\n\nfunction App() {\n\n  return (\n    <div>\n      <Header />\n      <WeatherInfo/>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}